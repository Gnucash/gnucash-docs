<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE appendix SYSTEM "gnc-docbookx.dtd">
<!-- (Do not remove this comment block.)
  Version: 2.0.0
  Last modified: July 9th 2006
  Maintainers: 
    Chris Lyttle <chris@wilddev.net>

  Author:
    Jon Lapham <lapham@extracta.com.br>
  Originally designed by Carol Champagne.
  Translators:
    (translators put your name and email here)
-->
<appendix id="appendixa">
  <title>移行ガイド</title>

  <para>本付録は、現在、他の財務ソフトウエアパッケージを使用しているユーザーが&app;へ移行することを助けるためのものです。
    他のソフトウエアパッケージに対する&app;勘定科目の割り当ての概念的な差異を扱います。
  </para>

  <sect1 id="appendixa_accts_vs_cats1">
    <title>カテゴリに対する勘定科目の使用</title>

    <para>他の個人向け財務プログラムに詳しい場合、既にカテゴリとして収益と費用を追跡するのに慣れているでしょう。
      &app;は複式記帳法 (2.1節を参照)
      を使用するので、収益、費用は勘定科目で追跡します。
      基本概念は同じですが、勘定科目構造は一般的な商慣行に従うように、より一貫しています。
      よって、個人利用者だけでなくビジネス利用者も、&app;によって、個人の勘定科目と同様にビジネス勘定科目の動向を追跡することが簡単にできます。
    </para>

    <para>収益と費用勘定科目はカテゴリと同じ情報を提供します。しかし、取引を入力する際には柔軟性がより高くなります。
      &app;では、収益と費用勘定科目記録簿を通して取引を直接入力するというオプションがあります。
      カテゴリを使用する他のプログラムでは、カテゴリに対する<quote>勘定科目記録簿</quote>が無いので、この方法を使用することができません。
    </para>

    <para>カテゴリで処理する方法により満足している場合、カテゴリで収益と費用勘定科目を処理するのと全く同じ方法を&app;内で使用することもできます。
      <trademark
class="registered">Quicken</trademark>および類似のプログラムでは、取引には勘定科目とカテゴリを必要とします。
      &app;で収益または費用勘定科目名を他のプログラムで通常入力しているカテゴリ名に置き換えれば、結果は同じになります。
      取引の入力については4章を参照してください。
    </para>
  </sect1>

  <sect1 id="appendixa_qif1">
    <title><acronym>QIF</acronym>ファイルの構成 (議論)</title>

    <para></para>
  </sect1>

  <sect1 id="appendixa_entercharge1">
    <title>一般的な重複の問題 (議論)</title>

    <para></para>
  </sect1>

  <sect1 id="appendixa_enterpay1">
    <title><acronym>QIF</acronym>データの確認 (議論)</title>

    <para></para>
  </sect1>

  <sect1 id="appendixa_xmlconvert1">
    <title><acronym>XML</acronym> &app;ファイルの変換</title>

    <para><acronym>XSLT</acronym>になじみ深いなら、&app;
      <acronym>XML</acronym>データファイルを他のほとんどいかなるデータフォーマット
      (例: <acronym>QIF</acronym>、<acronym>CSV</acronym>等)
      にでも、かなり容易に変換することができます。
      &app;データファイルは整形式の<acronym>XML</acronym>です。したがって、<acronym>XSLT</acronym>パーサを関連スタイルシートと併せて使用することで変換できます。
      よって、適切に書かれたスタイルシートがあれば、設計されたほとんどどんな形式にもファイルを変換することができます。
    </para>

    <para>いくつかの手順を次に示します。
      スタイルシートを書くことは異なる時間がかかる仕事です。一つを書くとしたら、必要な作業は次のようになります。
    </para>

    <orderedlist>
      <listitem>
        <para>&app;ファイルを作業ファイルとしてコピーします。
          作業ファイルの&lt;gnc-v2&gt;タグ部分を次のように変更します。
          <quote>="..."</quote>部分に何でも非常に多くの項目を置くことができることに注意してください。
          伝統的なので<acronym>URL</acronym>を使用しています
          (そのような若い技術と言われるかもしれないですが!)。
        </para>
        <important>
          <para>If the file was last modified by a version of &app; older than 2.0, then before you continue to the
            next step you will need to modify the working file&rsquo;s &lt;gnc-v2&gt; tag to read
            something like this:
<programlisting language="xml">
&lt;gnc-v2 xmlns:cd="http://www.gnucash.org/XML/cd"
  xmlns:book="http://www.gnucash.org/XML/book"
  xmlns:gnc="http://www.gnucash.org/XML/gnc"
  xmlns:cmdty="http://www.gnucash.org/XML/cmdty"
  xmlns:trn="http://www.gnucash.org/XML/trn"
  xmlns:split="http://www.gnucash.org/XML/split"
  xmlns:act="http://www.gnucash.org/XML/act"
  xmlns:price="http://www.gnucash.org/XML/price"
  xmlns:ts="http://www.gnucash.org/XML/ts"
  xmlns:slot="http://www.gnucash.org/XML/kvpslot"
  xmlns:cust="http://www.gnucash.org/XML/cust"
  xmlns:entry="http://www.gnucash.org/XML/entry"
  xmlns:lot="http://www.gnucash.org/XML/lot"
  xmlns:invoice="http://www.gnucash.org/XML/invoice"
  xmlns:owner="http://www.gnucash.org/XML/owner"
  xmlns:job="http://www.gnucash.org/XML/job"
  xmlns:billterm="http://www.gnucash.org/XML/billterm"
  xmlns:bt-days="http://www.gnucash.org/XML/bt-days"
  xmlns:sx="http://www.gnucash.org/XML/sx"
  xmlns:fs="http://www.gnucash.org/XML/fs"
  xmlns:addr="http://www.gnucash.org/XML/custaddr"&gt;
</programlisting>
          </para>
        </important>

        <note>
          <para>You can put pretty much anything you want behind the equal signs, but a unique
            <acronym>URL</acronym> is what is typically used.
          </para>
        </note>
      </listitem>

      <listitem>
        <para>希望する変換を行う<acronym>XSLT</acronym>スタイルシートを作成するか、または既に書かれたものを取得します(知っている限り一つもありませんが、CSVへの変換は作成中です)。
        </para>
      </listitem>

      <listitem>
        <para>Saxon (http://saxon.sourceforge.net/) またはXalan-J (http://xml.apache.org/)
          などのXSLT処理系をインストールします。
          実際には規格に適合していればどんな処理系でも行うことができます。
        </para>
      </listitem>

      <listitem>
        <para>処理系の手順に従って作業ファイルとスタイルシートを実行します。
        </para>
      </listitem>

      <listitem>
        <para>これにより、希望の出力形式のファイルを得られます。
          または、積極的な個人がいたとしたら&app;データファイルをOpenOffice.orgスプレッドシートに変えるスタイルシートを書くかもしれません
          (さらに言えば逆もまた同様です) 。
          <acronym>QIF</acronym>ではそのようなことはもっと少ない作業で行うことができます。
        </para>
      </listitem>
    </orderedlist>

    <para>利点は、この変換を行うSchemeモジュールまたは新規Cルーティンを書く必要はないということです。
      <acronym>XML</acronym>および<acronym>XSLT</acronym>を知っているか学習すれば誰でもこの作業を行うことができます。
      ウェブページを書くことに比べたらそんなに大変ではありません。
    </para>

    <para>Anyhow, I just wanted this tidbit to be captured somewhere permanently. The process works on
      &vers-stable; datafiles, and ought to work on earlier versions, too.
    </para>
  </sect1>
</appendix>
